import pymysql
from flask import Flask, request, jsonify
from flask_cors import CORS
from config import conn, cursor
import google.generativeai as genai
import os
from dotenv import load_dotenv
from pymysql.err import IntegrityError

load_dotenv()

app = Flask(__name__)
CORS(app)

API_KEY = os.getenv("GOOGLE_API_KEY")
genai.configure(api_key=API_KEY)

@app.route('/')
def index():
    return 'API ON', 200

@app.route('/login', methods=['POST'])
def login():
    data = request.get_json()
    email = data.get('email')
    senha = data.get('senha')

    if not email or not senha:
        return jsonify({'error': 'Email e senha são obrigatórios.'}), 400

    cursor.execute('SELECT id_aluno, nome, email FROM usuarios WHERE email = %s AND senha = %s', (email, senha))
    usuario = cursor.fetchone()

    if usuario:
        return jsonify({'message': 'Login realizado com sucesso!', 'user': usuario}), 200
    else:
        return jsonify({'error': 'Email ou senha inválidos.'}), 401

@app.route('/cadastrar_usuario', methods=['POST'])
def cadastrar_usuario():
    data = request.get_json()
    nome = data.get('nome')
    email = data.get('email')
    senha = data.get('senha')

    if not nome or not email or not senha:
        return jsonify({'error': 'Todos os campos são obrigatórios.'}), 400

    try:
        cursor.execute('INSERT INTO usuarios (nome, email, senha) VALUES (%s, %s, %s)', (nome, email, senha))
        conn.commit()
        return jsonify({'message': 'Usuário cadastrado com sucesso.'}), 201
    except IntegrityError:
        return jsonify({'error': 'Email já cadastrado.'}), 400

@app.route('/editar_usuario/<int:id_aluno>', methods=['PUT'])
def editar_usuario(id_aluno):
    data = request.get_json()
    nome = data.get('nome')
    email = data.get('email')
    senha = data.get('senha')

    if not nome or not email or not senha:
        return jsonify({'error': 'Todos os campos são obrigatórios.'}), 400

    cursor.execute('UPDATE usuarios SET nome=%s, email=%s, senha=%s WHERE id_aluno=%s', (nome, email, senha, id_aluno))
    conn.commit()

    if cursor.rowcount == 0:
        return jsonify({'error': 'Usuário não encontrado.'}), 404

    return jsonify({'message': 'Usuário atualizado com sucesso.'})

@app.route('/excluir_usuario/<int:id_aluno>', methods=['DELETE'])
def excluir_usuario(id_aluno):
    cursor.execute('DELETE FROM usuarios WHERE id_aluno=%s', (id_aluno,))
    conn.commit()

    if cursor.rowcount == 0:
        return jsonify({'error': 'Usuário não encontrado.'}), 404

    return jsonify({'message': 'Usuário excluído com sucesso.'})

@app.route('/usuarios', methods=['GET'])
def listar_usuarios():
    cursor.execute('SELECT id_aluno, nome, email FROM usuarios')
    usuarios = cursor.fetchall()
    return jsonify(usuarios)

@app.route('/mapa_conceitual', methods=['POST'])
def mapa_conceitual():
    data = request.get_json()

    if not data or 'tema' not in data:
        return jsonify({'error': 'O campo "tema" é obrigatório.'}), 400

    tema = data['tema']
    prompt = f"""Gere um mapa conceitual com 4 seções distintas sobre o tema '{tema}'.
Cada seção deve ter um subtítulo conciso e em negrito, seguido por um parágrafo detalhado sobre esse subtítulo.
Formato de saída esperado para cada seção:
**[Subtítulo da Seção]**
[Parágrafo detalhado sobre o subtítulo.]

Certifique-se de que cada seção seja clara e independente.
Exemplo:
**Introdução à IA**
A Inteligência Artificial (IA) é um campo da ciência da computação dedicado a resolver problemas cognitivos comumente associados à inteligência humana...

**Aprendizado de Máquina**
O Aprendizado de Máquina (Machine Learning - ML) é um subcampo da IA focado no desenvolvimento de sistemas que podem aprender...

**Redes Neurais**
Redes Neurais Artificiais (RNAs) são modelos computacionais inspirados no funcionamento do cérebro biológico...

**Aplicações da IA**
A IA tem uma vasta gama de aplicações, desde assistentes virtuais e carros autônomos até diagnósticos médicos e análise de dados...
"""

    try:
        model = genai.GenerativeModel('gemini-2.0-flash')
        response = model.generate_content(prompt)
        texto = response.text.strip()
        return jsonify({"assunto": tema, "contedo": texto})
    except Exception as e:
        return jsonify({"erro": str(e)}), 500

@app.route('/resumo', methods=['POST'])
def resumo():
    data = request.get_json()

    if not data or 'tema' not in data:
        return jsonify({'error': 'O campo "tema" é obrigatório.'}), 400

    tema = data['tema']
    prompt = f"Faça um resumo de tudo que aconteceu durante a(o) '{tema}'"

    try:
        model = genai.GenerativeModel('gemini-2.0-flash')
        response = model.generate_content(prompt)
        texto = response.text.strip()
        return jsonify({"assunto": tema, "contedo": texto})
    except Exception as e:
        return jsonify({"erro": str(e)}), 500

@app.route('/correcao', methods=['POST'])
def correcao():
    data = request.get_json()

    if not data or 'tema' not in data or 'texto' not in data:
        return jsonify({'error': 'Os campos "tema" e "texto" são obrigatórios.'}), 400

    tema = data['tema']
    texto = data['texto']

    prompt = f"Você é um professor e precisa corrigir o texto que seu aluno mandou sobre o tema '{tema}'. Esse é o texto do aluno: '{texto}'"

    try:
        model = genai.GenerativeModel('gemini-2.0-flash')
        response = model.generate_content(prompt)
        texto_corrigido = response.text.strip()
        return jsonify({"texto": texto, "contedo": texto_corrigido})
    except Exception as e:
        return jsonify({"erro": str(e)}), 500

@app.route('/flashcard', methods=['POST'])
def flashcard():
    data = request.get_json()

    if not data or 'tema' not in data:
        return jsonify({'error': 'O campo "tema" é obrigatório.'}), 400

    tema = data['tema']
    prompt = f"Gere 12 perguntas para flashcards sobre o tema '{tema}'. Retorne a pergunta e a resposta correta, a resposta deve ser breve e acertiva. Estrutura: Pergunta: [pergunta] Resposta: [resposta]"

    try:
        model = genai.GenerativeModel('gemini-2.0-flash')
        response = model.generate_content(prompt)
        texto = response.text.strip()
        return jsonify({"assunto": tema, "contedo": texto})
    except Exception as e:
        return jsonify({"erro": str(e)}), 500

@app.route('/quiz', methods=['POST'])
def quiz():
    data = request.get_json()

    if not data or 'tema' not in data:
        return jsonify({'error': 'O campo "tema" é obrigatório.'}), 400

    tema = data['tema']
    prompt = f"Gere uma prova com 10 questões sobre o tema '{tema}'. Retorne a pergunta com 4 alternativas e qual é a resposta correta."

    try:
        model = genai.GenerativeModel('gemini-2.0-flash')
        response = model.generate_content(prompt)
        texto = response.text.strip()
        return jsonify({"assunto": tema, "contedo": texto})
    except Exception as e:
        return jsonify({"erro": str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
